package poornima;
import java.util.*;
import java.time.*;
class Book {
	    private String id;
	    private String title;
	    private String author;
	    private boolean isAvailable;
	    private LocalDate dueDate;

	    public Book(String id, String title, String author) {
	        this.id = id;
	        this.title = title;
	        this.author = author;
	        this.isAvailable = true;
	    }

	    // Getters and setters
	    public String getId() {
	    	return id;
	    	}
	    public String getTitle() { 
	    	return title;
	    	}
	    public String getAuthor() {
	    	return author; 
	    	}
	    public boolean isAvailable() {
	    	return isAvailable; 
	    	}
	    public LocalDate getDueDate() { 
	    	return dueDate; 
	    	}

	    public void setAvailable(boolean available) {
	    	isAvailable = available; 
	    	}
	    public void setDueDate(LocalDate dueDate) {
	    	this.dueDate = dueDate; 
	    	}

	    @Override
	    public String toString() {
	        String status = isAvailable ? "Available" : "Checked Out (Due: " + dueDate + ")";
	        return id + " - " + title + " by " + author + " - " + status;
	    }
	}

	class User {
	    private String id;
	    private String name;
	    private String email;
	    private List<Book> borrowedBooks;

	    public User(String id, String name, String email) {
	        this.id = id;
	        this.name = name;
	        this.email = email;
	        this.borrowedBooks = new ArrayList<>();
	    }

	    // Getters
	    public String getId() { 
	    	return id; 
	    	}
	    public String getName() { 
	    	return name; 
	    	}
	    public String getEmail() { 
	    	return email; 
	    	}
	    public List<Book> getBorrowedBooks() {
	    	return borrowedBooks;
	    	}

	    public boolean borrowBook(Book book) {
	        if (book.isAvailable()) {
	            borrowedBooks.add(book);
	            book.setAvailable(false);
	            book.setDueDate(LocalDate.now().plusWeeks(2));
	            return true;
	        }
	        return false;
	    }

	    public boolean returnBook(Book book) {
	        if (borrowedBooks.remove(book)) {
	            book.setAvailable(true);
	            book.setDueDate(null);
	            return true;
	        }
	        return false;
	    }

	    @Override
	    public String toString() {
	        return id + " - " + name + " (" + email + ")";
	    }
	}

	class Library {
	    private Map<String, Book> books;
	    private Map<String, User> users;

	    public Library() {
	        this.books = new HashMap<>();
	        this.users = new HashMap<>();
	    }

	    // Book management methods
	    public void addBook(Book book) {
	        books.put(book.getId(), book);
	    }

	    public boolean removeBook(String bookId) {
	        Book book = books.get(bookId);
	        if (book != null && book.isAvailable()) {
	            books.remove(bookId);
	            return true;
	        }
	        return false;
	    }

	    public List<Book> searchBooks(String query) {
	        query = query.toLowerCase();
	        List<Book> results = new ArrayList<>();
	        for (Book book : books.values()) {
	            if (book.getTitle().toLowerCase().contains(query) || 
	                book.getAuthor().toLowerCase().contains(query) ||
	                book.getId().toLowerCase().contains(query)) {
	                results.add(book);
	            }
	        }
	        return results;
	    }

	    // User management methods
	    public void registerUser(User user) {
	        users.put(user.getId(), user);
	    }

	    public boolean removeUser(String userId) {
	        User user = users.get(userId);
	        if (user != null && user.getBorrowedBooks().isEmpty()) {
	            users.remove(userId);
	            return true;
	        }
	        return false;
	    }

	    // Borrowing methods
	    public boolean borrowBook(String userId, String bookId) {
	        User user = users.get(userId);
	        Book book = books.get(bookId);
	        
	        if (user != null && book != null) {
	            return user.borrowBook(book);
	        }
	        return false;
	    }

	    public boolean returnBook(String userId, String bookId) {
	        User user = users.get(userId);
	        Book book = books.get(bookId);
	        
	        if (user != null && book != null) {
	            return user.returnBook(book);
	        }
	        return false;
	    }

	    // Getters
	    public Collection<Book> getAllBooks() {
	    	return books.values();
	    	}
	    public Collection<User> getAllUsers() {
	    	return users.values(); 
	    	}
	    public Book getBook(String id) {
	    	return books.get(id); 
	    	}
	    public User getUser(String id) {
	    	return users.get(id); 
	    	}
	}

	 class LibraryManagementSystem {
	    private static Library library = new Library();
	    private static Scanner scanner = new Scanner(System.in);
	    
	    public static void main(String[] args) {
	        loadInitialData();
	        showMainMenu();
	    }
	    
	    private static void showMainMenu() {
	        while (true) {
	            System.out.println("\n=== Library Management System ===");
	            System.out.println("1. Book Operations");
	            System.out.println("2. User Operations");
	            System.out.println("3. Borrow/Return Operations");
	            System.out.println("4. Search Books");
	            System.out.println("5. View All Books");
	            System.out.println("6. View All Users");
	            System.out.println("7. Exit");
	            System.out.print("Enter your choice: ");
	            
	            int choice = scanner.nextInt();
	            scanner.nextLine(); // Consume newline
	            
	            switch (choice) {
	                case 1: bookOperations(); break;
	                case 2: userOperations(); break;
	                case 3: borrowReturnOperations(); break;
	                case 4: searchBooks(); break;
	                case 5: viewAllBooks(); break;
	                case 6: viewAllUsers(); break;
	                case 7: saveData();
	                        System.out.println("Exiting system...");
	                        return;
	                default: System.out.println("Invalid choice. Try again.");
	            }
	        }
	    }
	    
	    private static void bookOperations() {
	        System.out.println("\n=== Book Operations ===");
	        System.out.println("1. Add Book");
	        System.out.println("2. Remove Book");
	        System.out.println("3. Back to Main Menu");
	        System.out.print("Enter your choice: ");
	        
	        int choice = scanner.nextInt();
	        scanner.nextLine(); // Consume newline
	        
	        switch (choice) {
	            case 1:
	                System.out.print("Enter book ID: ");
	                String bookId = scanner.nextLine();
	                System.out.print("Enter book title: ");
	                String title = scanner.nextLine();
	                System.out.print("Enter author: ");
	                String author = scanner.nextLine();
	                
	                library.addBook(new Book(bookId, title, author));
	                System.out.println("Book added successfully!");
	                break;
	                
	            case 2:
	                System.out.print("Enter book ID to remove: ");
	                String removeId = scanner.nextLine();
	                if (library.removeBook(removeId)) {
	                    System.out.println("Book removed successfully!");
	                } else {
	                    System.out.println("Book not found or currently checked out.");
	                }
	                break;
	                
	            case 3:
	                return;
	                
	            default:
	                System.out.println("Invalid choice.");
	        }
	    }
	    
	    private static void userOperations() {
	        System.out.println("\n=== User Operations ===");
	        System.out.println("1. Register User");
	        System.out.println("2. Remove User");
	        System.out.println("3. Back to Main Menu");
	        System.out.print("Enter your choice: ");
	        
	        int choice = scanner.nextInt();
	        scanner.nextLine(); // Consume newline
	        
	        switch (choice) {
	            case 1:
	                System.out.print("Enter user ID: ");
	                String userId = scanner.nextLine();
	                System.out.print("Enter user name: ");
	                String name = scanner.nextLine();
	                System.out.print("Enter email: ");
	                String email = scanner.nextLine();
	                
	                library.registerUser(new User(userId, name, email));
	                System.out.println("User registered successfully!");
	                break;
	                
	            case 2:
	                System.out.print("Enter user ID to remove: ");
	                String removeId = scanner.nextLine();
	                if (library.removeUser(removeId)) {
	                    System.out.println("User removed successfully!");
	                } else {
	                    System.out.println("User not found or has borrowed books.");
	                }
	                break;
	                
	            case 3:
	                return;
	                
	            default:
	                System.out.println("Invalid choice.");
	        }
	    }
	    
	    private static void borrowReturnOperations() {
	        System.out.println("\n=== Borrow/Return Operations ===");
	        System.out.println("1. Borrow Book");
	        System.out.println("2. Return Book");
	        System.out.println("3. Back to Main Menu");
	        System.out.print("Enter your choice: ");
	        
	        int choice = scanner.nextInt();
	        scanner.nextLine(); // Consume newline
	        
	        switch (choice) {
	            case 1:
	                System.out.print("Enter user ID: ");
	                String userId = scanner.nextLine();
	                System.out.print("Enter book ID: ");
	                String bookId = scanner.nextLine();
	                
	                if (library.borrowBook(userId, bookId)) {
	                    System.out.println("Book borrowed successfully!");
	                } else {
	                    System.out.println("Failed to borrow book. Check if user/book exists and book is available.");
	                }
	                break;
	                
	            case 2:
	                System.out.print("Enter user ID: ");
	                String returnUserId = scanner.nextLine();
	                System.out.print("Enter book ID: ");
	                String returnBookId = scanner.nextLine();
	                
	                if (library.returnBook(returnUserId, returnBookId)) {
	                    System.out.println("Book returned successfully!");
	                } else {
	                    System.out.println("Failed to return book. Check if user/book exists and book was borrowed by this user.");
	                }
	                break;
	                
	            case 3:
	                return;
	                
	            default:
	                System.out.println("Invalid choice.");
	        }
	    }
	    
	    private static void searchBooks() {
	        System.out.print("\nEnter search query: ");
	        String query = scanner.nextLine();
	        List<Book> results = library.searchBooks(query);
	        
	        if (results.isEmpty()) {
	            System.out.println("No books found matching your search.");
	        } else {
	            System.out.println("\nSearch Results:");
	            for (Book book : results) {
	                System.out.println(book);
	            }
	        }
	    }
	    
	    private static void viewAllBooks() {
	        System.out.println("\n=== All Books ===");
	        Collection<Book> books = library.getAllBooks();
	        if (books.isEmpty()) {
	            System.out.println("No books in the library.");
	        } else {
	            for (Book book : books) {
	                System.out.println(book);
	            }
	        }
	    }
	    
	    private static void viewAllUsers() {
	        System.out.println("\n=== All Users ===");
	        Collection<User> users = library.getAllUsers();
	        if (users.isEmpty()) {
	            System.out.println("No users registered.");
	        } else {
	            for (User user : users) {
	                System.out.println(user);
	            }
	        }
	    }
	    
	    private static void loadInitialData() {
	        // Add some initial books
	        library.addBook(new Book("A001", "Recursion:The Unknown Mystery", "Blake crouch"));
	        library.addBook(new Book("A002", "Linklist:relation between you and me", "Parth sahal"));
	        library.addBook(new Book("Aoo3", "Stack:The person who come first in heart and stay at last", "parth"));
	        
	        // Register some initial users
	        library.registerUser(new User("U001", "Anushka", "2024BTech23000@poornima.edu.in"));
	        library.registerUser(new User("U002", "Anupam", "2024MCA45000@poornima.edu.in"));
	        
	        // Simulate some borrowed books
	        library.borrowBook("U001", "A001");
	    }
	    
	    private static void saveData() {
	        // In a real application, you would save to a file or database
	        System.out.println("Saving library data...");
	    }
	}






